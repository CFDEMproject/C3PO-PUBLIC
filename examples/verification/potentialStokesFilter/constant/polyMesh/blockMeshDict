/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

xInlet -4;
xOutlet 4;
xResolution 80; 

cyclicLength  4; //dp = 2, i.e., 4 diameters per box
cyclicStart -4;
cyclicResolution 80;

/*vertices
(
    (0 -8 -0.05)
    (1 -8 -0.05)
    (1 4 -0.05)
    (0 4 -0.05)
    (0 -8 0.05)
    (1 -8 0.05)
    (1 4 0.05)
    (0 4 0.05)
);*/

vertices
(
    ($xInlet    $cyclicStart $cyclicStart)
    ($xOutlet $cyclicStart $cyclicStart)
    ($xOutlet $cyclicLength $cyclicStart)
    ($xInlet    $cyclicLength $cyclicStart)
    ($xInlet    $cyclicStart $cyclicLength)
    ($xOutlet $cyclicStart $cyclicLength)
    ($xOutlet $cyclicLength $cyclicLength)
    ($xInlet    $cyclicLength $cyclicLength)
);

blocks          
(
    hex (0 1 2 3 4 5 6 7) ($xResolution $cyclicResolution $cyclicResolution) simpleGrading (1 1 1)
    //hex (0 1 2 3 4 5 6 7) (120 480 1) simpleGrading (1 1 1)
);

edges           
(
);

boundary         
(
    periodic_z0
    {
        type cyclic;        
/*         type wall;*/
        neighbourPatch periodic_z1;
        faces
        (
         (0 3 2 1)
        );
    }
    periodic_z1
    {
        type cyclic;
/*         type wall;*/
        neighbourPatch periodic_z0;
        faces
        (
         (4 5 6 7)
        );
    }

    periodic_y0
    {   
        type cyclic;
/*        type cyclicAMI;*/
        neighbourPatch periodic_y1;        
/*        type cyclicAMI;*/
//        neighbourPatch periodic_x0;
/*        transform translational;*/
/*        separationVector (-0.008 0 0);*/
        faces
        (
        (2 6 5 1)
       );
    }

    periodic_y1
    {
         type cyclic;
/*        type cyclicAMI;*/
        neighbourPatch periodic_y0;  
/*        transform translational;*/
/*        separationVector (0.008 0 0);*/
        faces
        (
        (0 4 7 3)
        );
    }

    periodic_x0
    {
        type patch;
/*        transform translational;*/
/*        separationVector (0 0.008 0);*/
        faces
        (
        (1 5 4 0)
        );
    }

    periodic_x1
    {
       type patch;
/*        transform translational;*/
/*        separationVector (0 -0.008 0);*/
        faces
        (
        (3 7 6 2)
        );
    }
);

mergePatchPairs 
(
);

// ************************************************************************* //
